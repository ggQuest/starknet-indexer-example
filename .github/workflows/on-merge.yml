name: Build and Deploy to staging

on:
  push:
    branches: "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    environment:
      name: staging
    runs-on: ubuntu-latest
    name: Build and push
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Generate image tag
        id: tag
        run: echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ steps.tag.outputs.COMMIT }}
          build-args: |
            PORT=${{ secrets.PORT }}

    outputs:
      IMAGE_TAG: ${{ steps.tag.outputs.COMMIT }}

  deploy:
    environment:
      name: staging
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Digital Ocean droplet
    steps:
      - name: Cleanup droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.DROPLET_USER }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            # Remove all unused containers, networks, images, volumes
            docker system prune -af
            # Stop current running container
            docker container stop ${{ secrets.IMAGE_NAME }}
            # Remove current old container
            docker container rm -f ${{ secrets.IMAGE_NAME }}
            # Remove all unused old images
            docker image prune -af

      - name: Deploy to Digital Ocean droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.DROPLET_USER }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            # Run a new container from a new image
            docker run -d \
            --restart unless-stopped \
            -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
            -e NODE_ENV="production" \
            -e GAME_ADDRESS="${{ secrets.GAME_ADDRESS }}" \
            -e START_BLOCK="${{ secrets.START_BLOCK }}" \
            -e API_URL="${{ secrets.API_URL }}" \
            -e GAME_SECRET="${{ secrets.GAME_SECRET }}" \
            --name ${{ secrets.IMAGE_NAME }} \
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ needs.build.outputs.IMAGE_TAG }}
